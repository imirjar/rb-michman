// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imirjar/rb-michman/internal/gateway/http (interfaces: Diver)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/imirjar/rb-michman/internal/models"
)

// MockDiver is a mock of Diver interface.
type MockDiver struct {
	ctrl     *gomock.Controller
	recorder *MockDiverMockRecorder
}

// MockDiverMockRecorder is the mock recorder for MockDiver.
type MockDiverMockRecorder struct {
	mock *MockDiver
}

// NewMockDiver creates a new mock instance.
func NewMockDiver(ctrl *gomock.Controller) *MockDiver {
	mock := &MockDiver{ctrl: ctrl}
	mock.recorder = &MockDiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiver) EXPECT() *MockDiverMockRecorder {
	return m.recorder
}

// DiverReports mocks base method.
func (m *MockDiver) DiverReports(arg0 context.Context, arg1 string) ([]models.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiverReports", arg0, arg1)
	ret0, _ := ret[0].([]models.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiverReports indicates an expected call of DiverReports.
func (mr *MockDiverMockRecorder) DiverReports(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiverReports", reflect.TypeOf((*MockDiver)(nil).DiverReports), arg0, arg1)
}

// GetDiverReportData mocks base method.
func (m *MockDiver) GetDiverReportData(arg0 context.Context, arg1, arg2 string) (models.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiverReportData", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiverReportData indicates an expected call of GetDiverReportData.
func (mr *MockDiverMockRecorder) GetDiverReportData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiverReportData", reflect.TypeOf((*MockDiver)(nil).GetDiverReportData), arg0, arg1, arg2)
}

// GetDiverReportDataMap mocks base method.
func (m *MockDiver) GetDiverReportDataMap(arg0 context.Context, arg1, arg2 string) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiverReportDataMap", arg0, arg1, arg2)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiverReportDataMap indicates an expected call of GetDiverReportDataMap.
func (mr *MockDiverMockRecorder) GetDiverReportDataMap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiverReportDataMap", reflect.TypeOf((*MockDiver)(nil).GetDiverReportDataMap), arg0, arg1, arg2)
}
