// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imirjar/rb-michman/internal/gateway/http (interfaces: Grazer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/imirjar/rb-michman/internal/models"
)

// MockGrazer is a mock of Grazer interface.
type MockGrazer struct {
	ctrl     *gomock.Controller
	recorder *MockGrazerMockRecorder
}

// MockGrazerMockRecorder is the mock recorder for MockGrazer.
type MockGrazerMockRecorder struct {
	mock *MockGrazer
}

// NewMockGrazer creates a new mock instance.
func NewMockGrazer(ctrl *gomock.Controller) *MockGrazer {
	mock := &MockGrazer{ctrl: ctrl}
	mock.recorder = &MockGrazerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrazer) EXPECT() *MockGrazerMockRecorder {
	return m.recorder
}

// ConnectDiver mocks base method.
func (m *MockGrazer) ConnectDiver(arg0 context.Context, arg1 models.Diver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDiver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectDiver indicates an expected call of ConnectDiver.
func (mr *MockGrazerMockRecorder) ConnectDiver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDiver", reflect.TypeOf((*MockGrazer)(nil).ConnectDiver), arg0, arg1)
}

// DiverAddr mocks base method.
func (m *MockGrazer) DiverAddr(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiverAddr", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiverAddr indicates an expected call of DiverAddr.
func (mr *MockGrazerMockRecorder) DiverAddr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiverAddr", reflect.TypeOf((*MockGrazer)(nil).DiverAddr), arg0, arg1)
}

// DiverList mocks base method.
func (m *MockGrazer) DiverList(arg0 context.Context) (map[string]models.Diver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiverList", arg0)
	ret0, _ := ret[0].(map[string]models.Diver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiverList indicates an expected call of DiverList.
func (mr *MockGrazerMockRecorder) DiverList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiverList", reflect.TypeOf((*MockGrazer)(nil).DiverList), arg0)
}
